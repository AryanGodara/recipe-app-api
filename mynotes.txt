0. docker build . (Create an image from the Dockerfile)
   docker-compose build

1. After Creating All the files, and an empty ./app directory.
   Run the following command in the current directory from the terminal :-

   docker-compose run app sh -c "django-admin.py startproject app ."

   docker-compose run : the syntaxical thingy, to run docker-compose commands
   app : the service from the docker-compose.yml file that we want to run
   sh -c : (Optional) Helps to separate the actual command, from the docker-compose syntax

   "" : The command that we want to run
   django-admin.py startproject : I know this from the django course
   app : start the new django project in our current location. (Since the project is running
   on our docker container, for it, the current directory, maps to the 'app' directory through
   bind mounts, which I learnt about in the django-k8s course)

2. After figuring out the travis-ci blunder, I'll momentarily shift to unit tests :-
   So, create the calc.py and tests.py files in /app/app. And then run the following command
   in the terminal :-

    docker-compose run app sh -c "python manage.py test"

    docker-compose run app sh -c "python manage.py test && flake8"
    (This one will also run the lynting along with our code)


3. To create a new app in for the django project, named 'core'
   docker-compose run app sh -c "python manage.py startapp core"

   We, then delete view.py (as we don't need this for the core app, as we're only building the
   backend API)
   Then, we delete tests.py, and create a new file : /tests/ (store tests here)

4. After creating the models, we need to makemigrations :-
   docker-compose run app sh -c "python manage.py makemigrations"
   docker-compose run app sh -c "python manage.py makemigrations core"
   (Sometimes it's better to specify the app on which we want to make migrations)

5. Now, create a file : tests_admin.py to store the tests for admin.py
   After creating the file, and the test.
   We'll now customize our django admin to list our custom user model.
   (See what we added to admin.py)

6. Add new serice called 'db' to docker-compose.yml file. Based on postgres image.
   Then, go to requirements.txt and (psycopg2>=2.7.5,<2.8.0)
   Then, go to the Dockerfile, and add the dependencies required to run this.

   Now, you need to rebuild : docker-compose build

7. Now, we have docker all set up, so we can go ahead and configure the database in django
   Go to settings.py, change the database.
   Now, create a new folder 'magagement' in 'core', and add the test files.

   After All this is done. Make migrations :-
   docker-compose up (This will start our app, and run the migrations)
   (It also starts the server)

8. Now, go to localhost:8000 (app will be running), then go to /admin
   Now, we need to create a superuser to login to this site, so use the command below

   docker-compose run app sh -c "python manage.py createsuperuser"
   (aryang@email.com 123)


9. Now, we createa a new 'user' app
   docker-compose run app sh -c "python manage.py startapp user"
   docker-compose run --rm app sh -c "python manage.py startapp user"
   (To remove the container after it has run the command)

   Add this 'user' app to INSTALLED_APPS along with rest_framework

   Then, remove the migrations folder. As we're keeping it in the core app.
   then remove admin.py, models.py, tests.py(we create a subfolder for tests)

   Then, go to tests/test_user_api.py file and write all the tests. Then run them(they'll fail)

   docker-compose run --rm app sh -c "python manage.py test"

10. Now, we're gonna implement our create user api to make our tests pass